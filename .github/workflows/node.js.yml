# Continuous Integration workflow for tugidoko project
# Runs code quality checks, type checking, and build tests

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint-and-typecheck:
    name: Code Quality
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip ci cd]')"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript check
      run: npx tsc --noEmit

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip ci cd]')"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip ci cd]')"
    permissions:
      contents: 'write'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      id: npm-audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run Socket security scan
      id: socket-scan
      env:
        SOCKET_SECURITY_API_KEY: ${{ secrets.SOCKET_TOKEN }}
      run: |
        npx socket@latest scan create . \
          --org snowing \
          --report \
          --no-banner \
          --no-spinner \
          --no-interactive
      continue-on-error: true

    - name: Determine security status
      id: security-status
      run: |
        if [[ "${{ steps.npm-audit.outcome }}" == "failure" || "${{ steps.socket-scan.outcome }}" == "failure" ]]; then
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "message=vulnerabilities%20found" >> $GITHUB_OUTPUT
          echo "color=red" >> $GITHUB_OUTPUT
        else
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=success" >> $GITHUB_OUTPUT
          echo "color=green" >> $GITHUB_OUTPUT
        fi

    - name: Update security badge
      run: |
        perl -i -pe 'BEGIN{undef $/;} s|<!-- SECURITY_CHECK -->.*?<!-- /SECURITY_CHECK -->|<!-- SECURITY_CHECK -->\n<img src="https://img.shields.io/badge/Security%20Check-${{ steps.security-status.outputs.message }}-${{ steps.security-status.outputs.color }}?logo=socket" alt="Badge">\n<!-- /SECURITY_CHECK -->|gs' README.md

    - name: Commit security badge update
      continue-on-error: true
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git stash
        git pull --rebase origin main
        git stash pop || git checkout --ours README.md
        git add README.md
        git diff --quiet && git diff --staged --quiet || \
          (git commit -m "chore: update security check badge [skip ci]" && git push)